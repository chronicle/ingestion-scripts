# Product: Recorded Future
# Category: IOC
# Supported Format: JSON
# Author: Jonah Feldman/Recorded Future
# Last Updated: 2025-01-01

filter {
  json {
    source   => "message"
    array_function => "split_columns"
    on_error => "not_json"
  }

  if [not_json] {
    drop {
      tag => "TAG_MALFORMED_MESSAGE"
    }
  }

  #define timestamps
  mutate {
    copy=> {
      "collected_timestamp" => "@createTimestamp.seconds"
    }
  }

  mutate {
    convert =>{
      "collected_timestamp" => "string"
    }
  }

  mutate {
    replace => {
      "ioc_interval.start" => "%{Timestamps.StartTime}"
      "ioc_interval.end" => "%{Timestamps.EndTime}"
    }

    #drop events from legacy integration
    on_error => "bad_start_time"
  }

  #assign timestamps
  date {
    match => ["Timestamps.StartTime","ISO8601"]
    target => "start_time"
    on_error => "bad_start_time"
  }


  date {
    match => ["Timestamps.EndTime","ISO8601"]
    target => "end_time"
    on_error => "bad_end_time"
  }
  date {
    match => ["collected_timestamp","UNIX"]
    target => "event.idm.entity.metadata.collected_timestamp"
  }

  if [bad_start_time] or [bad_end_time]{
    drop {
      tag => TAG_MALFORMED_MESSAGE
    }
  }

  mutate  {
    copy => {
      "event.idm.entity.metadata.interval.start_time" => "start_time"
       "event.idm.entity.metadata.interval.end_time" => "end_time"
    }
  }


  #assign risk score values
  mutate {
    copy => {
      "RiskScoreString" => "Risk"
    }
  }
  mutate {
    convert => {
      "RiskScoreString" => "string"
    }
    on_error => "risk_is_already_a string"
  }

  #Create event, create IOC if IP/Domain
  grok {
    match => {
      "Value" => "%{IP:ip}"
    }
    on_error => "not_ip"
  }
  if ![not_ip] {
    mutate {
      replace => {
        "event.ioc.feed_name" => "Recorded Future IOC"
        "event.ioc.confidence_score" => "%{RiskScoreString}"
        "event.ioc.raw_severity" => "%{RiskScoreString}"
        "event.ioc.categorization" => "%{RiskRules}"
        "event.ioc.ip_and_ports.ip_address" => "%{ip}"
        "event.idm.entity.metadata.entity_type" => "IP_ADDRESS"

      }
    }

    date {
      match => ["Timestamps.StartTime","ISO8601"]
      target => "event.ioc.active_timerange.start"
    }
    date {
      match => ["Timestamps.EndTime","ISO8601"]
      target => "event.ioc.active_timerange.end"
    }

    mutate {
      convert => {
        "event.ioc.ip_and_ports.ip_address" => "ipaddress"
      }
    }
    mutate {
      merge => {
         "event.idm.entity.entity.ip" => "ip"
      }
    }
  }
  else {
    grok {
      match => {
        Value => "(?P<Domain>^[0-9A-Za-z]+(?:\\.\\S+){1,})"
      }
      on_error => "not_domain"
    }
    if ![not_domain]{
      mutate {
        replace => {
          "event.ioc.feed_name" => "Recorded Future IOC"
          "event.ioc.confidence_score" => "%{RiskScoreString}"
          "event.ioc.raw_severity" => "%{RiskScoreString}"
          "event.ioc.categorization" => "%{RiskRules}"
          "event.ioc.domain_and_ports.domain" => "%{Value}"
          "event.idm.entity.entity.hostname" => "%{Value}"
          "event.idm.entity.metadata.entity_type" => "DOMAIN_NAME"
        }
      }

      date {
        match => ["Timestamps.StartTime","ISO8601"]
        target => "event.ioc.active_timerange.start"
      }
      date {
        match => ["Timestamps.EndTime","ISO8601"]
        target => "event.ioc.active_timerange.end"
      }
    }

    else{
      grok {
        match => {
          Value => "%{URI:url}"
        }
        on_error => "not_url"
      }
      if ![not_url]{
        mutate {
          replace => {
            "event.idm.entity.entity.url" => "%{Value}"
            "event.idm.entity.metadata.entity_type" => "URL"
          }
        }
      }
      #parsing hash
      else {
        grok {
          match => {
            Value => "(?P<hash>(?i)^[0-9a-f]{32}$|^[0-9a-f]{40}$|^[0-9a-f]{64}$)"
          }
          on_error => "not_hash"
        }
        if ![not_hash]{
          mutate {
            replace => {
              "event.idm.entity.metadata.entity_type" => "FILE"
            }
          }
          if [Algorithm] == "MD5"{
            mutate{
              replace => {
                "event.idm.entity.entity.file.md5" => "%{Value}"
              }
            }
          } else if [Algorithm] == "SHA-1" {
            mutate{
              replace => {
                "event.idm.entity.entity.file.sha1" => "%{Value}"
              }
            }
          } else if [Algorithm] == "SHA-256" {
            mutate{
              replace => {
                "event.idm.entity.entity.file.sha256" => "%{Value}"
              }
            }
          }
          else {
            drop{
              tag => "TAG_UNSUPPORTED"
            }
          }
        }
        #if not {IP,Domain,Hash,URL}, drop
        else{
           drop {
            tag =>"TAG_UNSUPPORTED"
           }
        }
      }
    }
  }



  mutate {
    replace => {
      "event.idm.entity.metadata.vendor_name" => "RECORDED_FUTURE_IOC"
    }
  }

  # build threat/SecurityResult for Event
  for detail in Details.EvidenceDetails {
    mutate {
      replace => {
        "threat_det" => ""
      }
    }


    if [detail][Criticality] >= 3 {
      mutate {
        replace => {
          "threat_cat" => "SOFTWARE_MALICIOUS"
          "threat_det.severity" => "HIGH"
        }
      }
    }
    else if [detail][Criticality] == 2 {
      mutate {
        replace => {
          "threat_cat" => "SOFTWARE_SUSPICIOUS"
          "threat_det.severity" => "MEDIUM"
        }
      }
    }
    else if [detail][Criticality] == 1 {
      mutate {
        replace => {
          "threat_cat" => "UNKNOWN_CATEGORY"
          "threat_det.severity" => "LOW"
        }
      }
    }
    mutate {
      convert => {
        "detail.Criticality" => "string"
      }
      on_error => "criticality_is_already_a string"
    }
    mutate {
      replace => {
        "category" => "%{RiskRules}"
      }
      merge => {
        "threat_det.category_details" => "category"
        "threat_det.category" => "threat_cat"
      }
    }

    mutate {
      replace => {
        "threat_det.rule_name" => "%{detail.Rule}"
        "threat_det.description" => "%{detail.EvidenceString}"
        "threat_det.threat_feed_name" => "Recorded Future IOC"
        "threat_det.severity_details" => "Risk - %{RiskScoreString}"

      }
    }

    mutate {
      copy => {
        "threat_det.risk_score" => "Risk"
      }
    }
    mutate {
      merge => {
        "event.idm.entity.metadata.threat" => "threat_det"
      }
    }

  }



  mutate {
    merge => {
      "@output" => "event"
    }
  }

}
